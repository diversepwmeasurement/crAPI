jobs:
  build:
    env:
      PLATFORMS: linux/amd64,linux/arm64
    needs: build-context
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Env seen prerun
      run: env
    - continue-on-error: true
      id: branch-name
      name: Get branch name
      uses: tj-actions/branch-names@v8
    - continue-on-error: true
      name: Current branch name
      run: 'echo "Current Branch: ${{ steps.branch-name.outputs.current_branch }}"

        echo "Target Branch: ${{ steps.branch-name.outputs.base_ref_branch }}"

        echo "Tag if exist: ${{ steps.branch-name.outputs.tag }}"

        '
    - continue-on-error: true
      if: steps.branch-name.outputs.is_tag == 'true'
      name: Running on a tag.
      run: 'echo "TAG_NAME=${{ steps.branch-name.outputs.tag }}" >> ${GITHUB_ENV}

        echo "TAG_LATEST=latest" >> ${GITHUB_ENV}

        '
    - continue-on-error: true
      if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push'
        && steps.branch-name.outputs.current_branch != 'main'
      name: Running on a branch and merge.
      run: 'echo "TAG_NAME=${{ steps.branch-name.outputs.current_branch }}" >> ${GITHUB_ENV}

        echo "TAG_LATEST=${{ steps.branch-name.outputs.current_branch }}" >> ${GITHUB_ENV}

        '
    - continue-on-error: true
      if: steps.branch-name.outputs.is_tag != 'true' && github.event_name == 'push'
        && steps.branch-name.outputs.current_branch == 'main'
      name: Running on main branch.
      run: 'echo "TAG_NAME=${{ steps.branch-name.outputs.current_branch }}" >> ${GITHUB_ENV}

        echo "TAG_LATEST=latest" >> ${GITHUB_ENV}

        '
    - continue-on-error: true
      if: steps.branch-name.outputs.is_tag != 'true' && github.event_name != 'push'
      name: Running on a branch and pull req.
      run: 'echo "TAG_NAME=${{ steps.branch-name.outputs.base_ref_branch }}" >> ${GITHUB_ENV}

        echo "TAG_LATEST=${{ steps.branch-name.outputs.base_ref_branch }}" >> ${GITHUB_ENV}

        '
    - continue-on-error: true
      id: buildx
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - continue-on-error: true
      id: qemu
      name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - continue-on-error: true
      name: Build crapi-identity image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=identity-service
        cache-to: type=gha,mode=max,scope=identity-service
        context: ./services/identity
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/crapi-identity:${{ env.TAG_LATEST }},crapi/crapi-identity:${{
          env.TAG_NAME }}
    - continue-on-error: true
      name: Build crapi-workshop image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=workshop-service
        cache-to: type=gha,mode=max,scope=workshop-service
        context: ./services/workshop
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/crapi-workshop:${{ env.TAG_LATEST }},crapi/crapi-workshop:${{
          env.TAG_NAME }}
    - continue-on-error: true
      name: Build crapi-community image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=community-service
        cache-to: type=gha,mode=max,scope=community-service
        context: ./services/community
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/crapi-community:${{ env.TAG_LATEST }},crapi/crapi-community:${{
          env.TAG_NAME }}
    - continue-on-error: true
      name: Build crapi-web image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=web-service
        cache-to: type=gha,mode=max,scope=web-service
        context: ./services/web
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/crapi-web:${{ env.TAG_LATEST }},crapi/crapi-web:${{ env.TAG_NAME
          }}
    - continue-on-error: true
      name: Build gateway-service image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=gateway-service
        cache-to: type=gha,mode=max,scope=gateway-service
        context: ./services/gateway-service
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/gateway-service:${{ env.TAG_LATEST }},crapi/gateway-service:${{
          env.TAG_NAME }}
    - continue-on-error: true
      name: Build mailhog image
      uses: docker/build-push-action@v3
      with:
        cache-from: type=gha,scope=mailhog-service
        cache-to: type=gha,mode=max,scope=mailhog-service
        context: ./services/mailhog
        load: true
        platforms: linux/amd64
        push: false
        tags: crapi/mailhog:${{ env.TAG_LATEST }},crapi/mailhog:${{ env.TAG_NAME }}
    - continue-on-error: true
      name: Show all images built
      run: docker images
    - continue-on-error: true
      name: Env seen
      run: env
    - continue-on-error: true
      name: Run crAPI using built images
      run: VERSION=${{ env.TAG_NAME }} docker-compose -f deploy/docker/docker-compose.yml
        --compatibility up -d
    - continue-on-error: true
      name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 14
    - continue-on-error: true
      name: Install newman
      run: npm install -g newman
    - continue-on-error: true
      name: Run Postman Collection
      run: (newman run "./postman_collections/crAPI.postman_collection.json" -e ./postman_collections/crAPI.postman_environment.json
        --verbose) || true
    - continue-on-error: true
      if: failure()
      name: Dump docker logs on failure
      uses: jwalton/gh-docker-logs@v2
    - continue-on-error: true
      name: Cleanup docker
      run: docker-compose -f deploy/docker/docker-compose.yml down --volumes --remove-orphans
  build-context:
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      name: Dump GitHub context
      run: echo "$GITHUB_CONTEXT"
  tests:
    needs: build-context
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout code
      uses: actions/checkout@v4
    - continue-on-error: true
      name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: adopt
        java-version: '17'
    - continue-on-error: true
      name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    - continue-on-error: true
      name: Start the database
      run: docker-compose -f services/docker-database.yml up -d
    - continue-on-error: true
      name: Run identity tests
      run: 'cd services/identity

        ./gradlew test

        '
    - continue-on-error: true
      name: Run community tests
      run: 'cd services/community

        go test -v ./...

        mkdir test-results

        go run gotest.tools/gotestsum@latest --format testname --junitfile test-results/unit-tests.xml

        '
    - continue-on-error: true
      name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54
        working-directory: services/community
    - continue-on-error: true
      name: Run workshop tests
      run: 'cd services/workshop

        pip3 install virtualenv

        virtualenv venv

        source venv/bin/activate

        pip3 install -r requirements.txt

        pip3 install -r dev-requirements.txt

        mkdir -p test-results

        source .env

        IS_TESTING=True python3 manage.py test --no-input --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner

        '
    - continue-on-error: true
      if: always()
      name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: '**/test-results/**/*.xml

          **/test-results/**/*.json

          '
    - continue-on-error: true
      name: Run workshop coverage
      run: 'cd services/workshop

        source venv/bin/activate

        source .env

        IS_TESTING=True coverage run ./manage.py test --no-input crapi

        coverage report

        coverage xml -o coverage.xml

        '
    - continue-on-error: true
      name: Publish Coverage for workshop
      uses: orgoro/coverage@v3.1
      with:
        coverageFile: services/workshop/coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      name: node prettier
      run: 'cd services/web

        npm install

        npm run lint'
name: PR Build
on:
  repository_dispatch:
    types: trigger-ga___pr-build.yml
